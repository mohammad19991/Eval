{"Typealiases.html#/s:4Eval12MatcherBlocka":{"name":"MatcherBlock","abstract":"<p><code>MatcherBlock</code> is used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code> classes, when the matched expression should be processed in a custom way. It should return a strongly typed object after the evaluations."},"Protocols/FunctionProtocol.html#/s:4Eval16FunctionProtocolP7convertypSgSS5input_AA16TypedInterpreterC11interpreterAA0G7ContextC7contexttF":{"name":"convert(input:interpreter:context:)","abstract":"<p>Functions use similar convesion methods as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s. If they return <code>nil</code>, the function does not apply to the given input. Otherwise the result is expressed as an instance of a given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>","parent_name":"FunctionProtocol"},"Protocols/DataTypeProtocol.html#/s:4Eval16DataTypeProtocolP7convertypSgSS5input_AA16TypedInterpreterC11interpretertF":{"name":"convert(input:interpreter:)","abstract":"<p>If the framework meets with some static value that hasn&rsquo;t been processed before, it tries to convert it with every registeres data types.","parent_name":"DataTypeProtocol"},"Protocols/DataTypeProtocol.html#/s:4Eval16DataTypeProtocolP5printSSSgyp5value_tF":{"name":"print(value:)","abstract":"<p>This is a convenience method, for debugging and value printing purposes, which can return a string from the current data type.","parent_name":"DataTypeProtocol"},"Protocols/MatchElement.html#/s:4Eval12MatchElementP7matchesAA0B6ResultOyypGSS6prefix_Sb6isLasttF":{"name":"matches(prefix:isLast:)","abstract":"<p>Using this method, an element returns how much the String provided in the <code>prefix</code> parameter matches ths current element","parent_name":"MatchElement"},"Protocols/Interpreter.html#/s:4Eval11InterpreterP33interpreterForEvaluatingVariables17VariableEvaluatorQzv":{"name":"interpreterForEvaluatingVariables","abstract":"<p>Sometimes interpreters don&rsquo;t use themselves to evaluate variables by default, maybe a third party, or another contained interpreter. For example, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TemplateInterpreter.html\">TemplateInterpreter</a></code> class uses <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TypedInterpreter.html\">TypedInterpreter</a></code> instance to evaluate its variables.</p>","parent_name":"Interpreter"},"Protocols/ContextAware.html#/s:4Eval12ContextAwareP7contextAA011InterpreterB0Cv":{"name":"context","abstract":"<p>The stored context object for helping evaluation and providing persistency</p>","parent_name":"ContextAware"},"Protocols/EvaluatorWithContext.html#/s:4Eval20EvaluatorWithContextP8evaluate13EvaluatedTypeQzSS_AA011InterpreterD0C7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>Evaluates the provided string expression with the help of the context parameter, and returns a strongly typed object</p>","parent_name":"EvaluatorWithContext"},"Protocols/Evaluator.html#/s:4Eval9EvaluatorP8evaluate13EvaluatedTypeQzSSF":{"name":"evaluate(_:)","abstract":"<p>The only method in <code>Evaluator</code> protocol which does the evaluation of a string expression, and returns a strongly typed object</p>","parent_name":"Evaluator"},"Protocols/Evaluator.html":{"name":"Evaluator","abstract":"<p>A protocol which is capable of evaluating a string expressions to a strongly typed object</p>"},"Protocols/EvaluatorWithContext.html":{"name":"EvaluatorWithContext","abstract":"<p>A special kind of evaluator which uses an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/InterpreterContext.html\">InterpreterContext</a></code> instance to evaluate expressions"},"Protocols/ContextAware.html":{"name":"ContextAware","abstract":"<p>A protocol which stores one <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/InterpreterContext.html\">InterpreterContext</a></code> instance</p>"},"Protocols/Interpreter.html":{"name":"Interpreter","abstract":"<p>The base protocol of interpreters, that are context aware, and capable of recursively evaluating variables. They use the evaluate method as their main input</p>"},"Protocols/MatchElement.html":{"name":"MatchElement","abstract":"<p><code>MatchElement</code>s are used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Matcher.html\">Matcher</a></code> instances to be able to recognise patterns. Currently, the two main kind of <code>MatchElement</code> classes are <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code>s and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>s</p>"},"Protocols/DataTypeProtocol.html":{"name":"DataTypeProtocol","abstract":"<p>Data types tell the framework which kind of data can be parsed in the expressions</p>"},"Protocols/FunctionProtocol.html":{"name":"FunctionProtocol","abstract":"<p><code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code>s can process values in given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s, allowing the expressions to be feature-rich</p>"},"Functions.html#/s:4Eval1poiSayAA12MatchElement_pGAaC_p_AaC_ptF":{"name":"+(_:_:)","abstract":"<p>Syntactic sugar for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/MatchElement.html\">MatchElement</a></code> instances to feel like concatenation, whenever the input requires an array of elements.</p>"},"Enums/MatchResult.html#/s:4Eval11MatchResultO02noB0ACyxGAEmlF":{"name":"noMatch","abstract":"<p>The input could not be matched</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO08possibleB0ACyxGAEmlF":{"name":"possibleMatch","abstract":"<p>The input can possibly match, if it were continuted. (It&rsquo;s the prefix of the matching expression)</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO05exactB0ACyxGSi6length_x6outputs10DictionaryVySSypG9variablestcAEmlF":{"name":"exactMatch","abstract":"<p>The input matches the expression. It provides information about the <code>length</code> of the matched input, the <code>output</code> after the evaluation, and the <code>variables</code> that were processed during the process.</p>","parent_name":"MatchResult"},"Enums/MatchResult.html#/s:4Eval11MatchResultO03anyB0ACyxGSb8shortest_tcAEmlF":{"name":"anyMatch","abstract":"<p>In case the matching sequence only consists of one variable, the result is going to be anyMatch</p>","parent_name":"MatchResult"},"Enums/MatchResult.html":{"name":"MatchResult","abstract":"<p>Whenever a match operation is performed, the result is going to be a <code>MatchResult</code> instance.</p>"},"Classes/Matcher.html#/s:4Eval7MatcherC8elementsSayAA12MatchElement_pGv":{"name":"elements","abstract":"<p><code>Matcher</code> instances are capable of recognising patterns described in the <code>elements</code> collection. It only remains effective, if the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code> instances are surrounded by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> instances, so no two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>s should be next to each other, otherwise their matching result and value would be undefined.","parent_name":"Matcher"},"Classes/Matcher.html#/s:4Eval7MatcherCACyxq_GSayAA12MatchElement_pG_xSgs10DictionaryVySSypG_q_AA18InterpreterContextCtc7matchertcfc":{"name":"init(_:matcher:)","abstract":"<p>The first parameter is the pattern, that needs to be recognised. The <code>matcher</code> ending closure is called whenever the pattern has successfully been recognised, and allows the users of this framework to provide custom computations using the matched <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code> values.</p>","parent_name":"Matcher"},"Classes/Function.html#/s:4Eval8FunctionC8patternsSayAA7MatcherCyxAA16TypedInterpreterCGGv":{"name":"patterns","abstract":"<p>Although <code>Function</code>s typically contain only one pattern, multiple ones can be added, for semantic grouping purposes</p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionCACyxGSayAA7MatcherCyxAA16TypedInterpreterCGG8patterns_tcfc":{"name":"init(patterns:)","abstract":"<p>If multiple patterns are provided use this initialiser. Otherwise, for only one, there is <code>init(_,matcher:)</code></p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionCACyxGSayAA12MatchElement_pG_xSgs10DictionaryVySSypG_AA16TypedInterpreterCAA0G7ContextCtc7matchertcfc":{"name":"init(_:matcher:)","abstract":"<p>The element contains the pattern that needs to be recognised. The matcher ending closure then transforms and processes the recognised value</p>","parent_name":"Function"},"Classes/Function.html#/s:4Eval8FunctionC7convertypSgSS5input_AA16TypedInterpreterC11interpreterAA0F7ContextC7contexttF":{"name":"convert(input:interpreter:context:)","abstract":"<p>The matching of the input expression of a given <code>Function</code> happens in this method. It only accepts matches from the matcher, that are exact matches.</p>","parent_name":"Function"},"Classes/Literal.html#/s:4Eval7LiteralCACyxGxSgSS_AA16TypedInterpreterCtc7convert_tcfc":{"name":"init(convert:)","abstract":"<p>In case of more complicated expression, this initialiser accepts a <code>convert</code> block, which can be used to process static values. Return nil, if the input cannot be accepted and converted.</p>","parent_name":"Literal"},"Classes/Literal.html#/s:4Eval7LiteralCACyxGSS_xyXK10convertsTotcfc":{"name":"init(_:convertsTo:)","abstract":"<p>In case the literals are easily expressed, static keywords, then this initialiser is the best to use.","parent_name":"Literal"},"Classes/DataType.html#/s:4Eval8DataTypeCACyxGxm4type_SayAA7LiteralCyxGG8literalsSSxc5printtcfc":{"name":"init(type:literals:print:)","abstract":"<p>In order to be able to effectively bridge the outside world, it needs to provide an already existing Swift or user-defined type. This can be class, struct, enum, or anything else, for example block or function (which is not recommended).","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC7convertypSgSS5input_AA16TypedInterpreterC11interpretertF":{"name":"convert(input:interpreter:)","abstract":"<p>For the conversion it uses the regitered literals, to be able to process the input and return an existing type</p>","parent_name":"DataType"},"Classes/DataType.html#/s:4Eval8DataTypeC5printSSSgyp5value_tF":{"name":"print(value:)","abstract":"<p>This is a convenience method, for debugging and value printing purposes, which can return a string from the current data type.","parent_name":"DataType"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC13EvaluatedTypea":{"name":"EvaluatedType","abstract":"<p>The result is a strongly typed value or <code>nil</code> (if cannot be properly processed)</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC7contextAA0C7ContextCv":{"name":"context","abstract":"<p>The global context used for every evaluation with this instance</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC33interpreterForEvaluatingVariablesACv":{"name":"interpreterForEvaluatingVariables","abstract":"<p>The interpreter used for evaluating variable values. In case of the <code>TypedInterpreter</code>, it&rsquo;s itself</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC9dataTypesSayAA16DataTypeProtocol_pGv":{"name":"dataTypes","abstract":"<p>The data types that the expression is capable of recognise</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC9functionsSayAA16FunctionProtocol_pGv":{"name":"functions","abstract":"<p>The list of functions, that are available during the evaluation to process the recognised data types</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterCACSayAA16DataTypeProtocol_pG9dataTypes_SayAA08FunctionF0_pG9functionsAA0C7ContextC7contexttcfc":{"name":"init(dataTypes:functions:context:)","abstract":"<p>Each item of the input list (data types, functions and the context) is optional, but strongly recommended to provide them. It&rsquo;s usual that for every data type, there are a few functions provided, so the list can occasionally be pretty long.</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8evaluateypSgSSF":{"name":"evaluate(_:)","abstract":"<p>The evaluation method, that produces the strongly typed results. In this case only the globally avaliable context can be used</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC8evaluateypSgSS_AA0C7ContextC7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>The evaluation method, that produces the strongly typed results. In this case only the context is a result of merging the global context and the one provided in the parameter</p>","parent_name":"TypedInterpreter"},"Classes/TypedInterpreter.html#/s:4Eval16TypedInterpreterC5printSSypF":{"name":"print(_:)","abstract":"<p>A helper to be able to effectively print any result, coming out of the evaluation. The <code>print</code> method recognises the used data type, and uses its string conversion block</p>","parent_name":"TypedInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC13EvaluatedTypea":{"name":"EvaluatedType","abstract":"<p>The result of a template evaluation is a String</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC10statementsSayAA7MatcherCySSACGGv":{"name":"statements","abstract":"<p>The statements (patterns) registered to the interpreter. If found, these are going to be processed, and replaced with the evaluated value</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC7contextAA0C7ContextCv":{"name":"context","abstract":"<p>The context used when evaluating the expressions. These context variables are global, used in every evaluation processed with this instance.</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC05typedC0AA05TypedC0Cv":{"name":"typedInterpreter","abstract":"<p>The <code>TemplateInterpreter</code> contains a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TypedInterpreter.html\">TypedInterpreter</a></code>, as it is quite common practice to evaluate strongly typed expression as s support for the template language.","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC17VariableEvaluatora":{"name":"VariableEvaluator","abstract":"<p>The evaluator type, that is being used to process variables. By default, the TypedInterpreter is being used</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC33interpreterForEvaluatingVariablesAA05TypedC0Cv":{"name":"interpreterForEvaluatingVariables","abstract":"<p>The evaluator, that is being used to process variables</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterCACSayAA7MatcherCySSACGG10statements_AA05TypedC0C11interpreterAA0C7ContextC7contexttcfc":{"name":"init(statements:interpreter:context:)","abstract":"<p>The statements, and context parameters are optional, but highly recommended to use with actual values.","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC8evaluateS2SF":{"name":"evaluate(_:)","abstract":"<p>The main part of the evaluation happens here. In this case only the global context variables are going to be used</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateInterpreter.html#/s:4Eval19TemplateInterpreterC8evaluateS2S_AA0C7ContextC7contexttF":{"name":"evaluate(_:context:)","abstract":"<p>The main part of the evaluation happens here. In this case the global context variables merged together with the provided context are going to be used.</p>","parent_name":"TemplateInterpreter"},"Classes/TemplateVariable.html#/s:4Eval16TemplateVariableCACSS_Sb8shortesttcfc":{"name":"init(_:shortest:)","abstract":"<p>No changes compared to the initialiser of the superclass <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>, uses the same parameters</p>","parent_name":"TemplateVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableCACyxq_GSS_Sb8shortestSb11interpretedSb15acceptsNilValuexSgyp_q_tc3maptcfc":{"name":"init(_:shortest:interpreted:acceptsNilValue:map:)","abstract":"<p><code>GenericVariable</code>s have a name (unique identifier), that is used when matching and return them in the matcher.","parent_name":"GenericVariable"},"Classes/GenericVariable.html#/s:4Eval15GenericVariableC7matchesAA11MatchResultOyypGSS6prefix_Sb6isLasttF":{"name":"matches(prefix:isLast:)","abstract":"<p><code>GenericVariables</code> always return anyMatch MatchResult, forwarding the shortest argument, provided during initialisation</p>","parent_name":"GenericVariable"},"Classes/CloseKeyword.html#/s:4Eval12CloseKeywordCACSScfc":{"name":"init(_:)","abstract":"<p>The initialiser uses the closing type, but the <code>name</code> still must be provided</p>","parent_name":"CloseKeyword"},"Classes/OpenKeyword.html#/s:4Eval11OpenKeywordCACSScfc":{"name":"init(_:)","abstract":"<p>The initialiser uses the opening type, but the <code>name</code> still must be provided</p>","parent_name":"OpenKeyword"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO7genericA2EmF":{"name":"generic","abstract":"<p>By default, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> are created as a generic type, meaning, that there is no special requirement, that they need to fulfill</p>","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO16openingStatementA2EmF":{"name":"openingStatement","abstract":"<p>If a pattern contains two, semantically paired <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code>s, they often represent opening and closing parentheses or any kind of special enclosing characters.","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html#/s:4Eval7KeywordC0B4TypeO16closingStatementA2EmF":{"name":"closingStatement","abstract":"<p>If a pattern contains two, semantically paired <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code>s, they often represent opening and closing parentheses or any kind of special enclosing characters.","parent_name":"KeywordType"},"Classes/Keyword/KeywordType.html":{"name":"KeywordType","abstract":"<p>The type of the Keyword determines whether the item hold a special purpose, or it&rsquo;s just an ordinary static String</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC1Ta":{"name":"T","abstract":"<p>The <code>Keyword</code> always results in String values, after the matching</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordCACSS_AC0B4TypeO4typetcfc":{"name":"init(_:type:)","abstract":"<p><code>Keyword</code> must have a name, which is equal to their represented value. The type parameter defaults to generic</p>","parent_name":"Keyword"},"Classes/Keyword.html#/s:4Eval7KeywordC7matchesAA11MatchResultOyypGSS6prefix_Sb6isLasttF":{"name":"matches(prefix:isLast:)","abstract":"<p><code>Keyword</code> instances are returning exactMatch, when they are equal to the <code>prefix</code> input. If the input is really just a prefix of the keyword, possible metch is returned. noMatch otherwise.</p>","parent_name":"Keyword"},"Classes/InterpreterContext.html#/s:4Eval18InterpreterContextC9variabless10DictionaryVySSypGv":{"name":"variables","abstract":"<p>The stored variables</p>","parent_name":"InterpreterContext"},"Classes/InterpreterContext.html#/s:4Eval18InterpreterContextCACs10DictionaryVySSypG9variables_tcfc":{"name":"init(variables:)","abstract":"<p>Users of the context may optionally provide an initial set of variables</p>","parent_name":"InterpreterContext"},"Classes/InterpreterContext.html":{"name":"InterpreterContext","abstract":"<p>The only responsibility of the <code>InterpreterContext</code> class is to store variables, and keep them during the execution, where multiple expressions might use the same set of variables.</p>"},"Classes/Keyword.html":{"name":"Keyword","abstract":"<p><code>Keyword</code> instances are used to provide static points in match sequences, so that they can be used as pillars of the expressions the developer tries to match</p>"},"Classes/OpenKeyword.html":{"name":"OpenKeyword","abstract":"<p>A special subclass of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> class, which initialises a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> with an opening type. Usually used for opening parentheses: OpenKeyword(<q>[</q>)</p>"},"Classes/CloseKeyword.html":{"name":"CloseKeyword","abstract":"<p>A special subclass of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> class, which initialises a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Keyword.html\">Keyword</a></code> with an closing type. Usually used for closing parentheses: CloseKeyword(<q>]</q>)</p>"},"Classes/GenericVariable.html":{"name":"GenericVariable","abstract":"<p>Generic superclass of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses.html#/s:4Eval8VariableC\">Variable</a></code>s which are aware of their <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Interpreter.html\">Interpreter</a></code> classes, as they use it when mapping their values</p>"},"Classes.html#/s:4Eval8VariableC":{"name":"Variable","abstract":"<p><code>Variable</code> represents a named placeholder, so when the matcher recognises a pattern, the values of the variables are passed to them in a block.</p>"},"Classes/TemplateVariable.html":{"name":"TemplateVariable","abstract":"<p>A special kind of variable, that is used in case of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TemplateInterpreter.html\">TemplateInterpreter</a></code>s. It does not convert its content using the <code>interpreterForEvaluatingVariables</code>, but always uses the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TemplateInterpreter.html\">TemplateInterpreter</a></code> instance."},"Classes/TemplateInterpreter.html":{"name":"TemplateInterpreter","abstract":"<p>This interpreter is used to evaluate string expressions and return a transformed string, replacing the content where it matches certain patterns."},"Classes/TypedInterpreter.html":{"name":"TypedInterpreter","abstract":"<p>A type of interpreter implementation, that is capable of evaluating arbitrary string expressions to strongly typed variables</p>"},"Classes/DataType.html":{"name":"DataType","abstract":"<p>The implementation of a <code>DataType</code> uses the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/DataTypeProtocol.html\">DataTypeProtocol</a></code> to convert input to a strongly typed data and print it if needed</p>"},"Classes/Literal.html":{"name":"Literal","abstract":"<p><code>Literal</code>s are used by <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s to be able to recognise static values, that can be expressed as a given type</p>"},"Classes/Function.html":{"name":"Function","abstract":"<p><code>Function</code>s can process values in given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DataType.html\">DataType</a></code>s, allowing the expressions to be feature-rich</p>"},"Classes/Matcher.html":{"name":"Matcher","abstract":"<p>Matchers are the heart of the Eval framework, providing pattern matching capabilities to the library.</p>"},"page.html":{"name":"Page"},"readme.html":{"name":"README"},"Guides.html":{"name":"Guides","abstract":"<p>The following guides are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}